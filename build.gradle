usePlugin 'jetty'
usePlugin 'eclipse'

sourceTarget = 1.6
version = '1.0'

// Assuming if you didn't put an environment and you're using the jetty tasks you want jetty
gradle.taskGraph.whenReady {taskGraph -> 
  if (taskGraph.hasTask(':jettyRun') || taskGraph.hasTask(':jettyRunWar')) {
    this.dependencies.add('runtime', 'org.jboss.weld.servlet:weld-servlet:1.0.0-CR2')
    this.dependencies.add('runtime', 'javax.faces:jsf-impl:2.0.1-FCS')
  }
}

repositories {
  mavenCentral()
  mavenRepo urls: 'http://repository.jboss.org/maven2'
  mavenRepo urls: 'http://download.java.net/maven/2'
}

configurations {
  servlet.extendsFrom providedRuntime

  servlet.exclude group: 'javax.xml.bind'
  servlet.exclude group: 'com.sun.xml.bind'
  servlet.exclude group: 'javax.el'

  runtime.exclude group: 'javax.el'
}

dependencies {
  providedCompile 'javax.enterprise:cdi-api:1.0'
  providedCompile 'javax.faces:jsf-api:2.0.1-FCS'
  providedCompile 'javax.annotation:jsr250-api:1.0'
  providedCompile 'javax.validation:validation-api:1.0.0.GA'
  providedCompile 'javax.inject:javax.inject:1'

  providedRuntime 'javax.transaction:jta:1.0.1B'
  providedRuntime 'jboss.jbossts:jbossjta:4.4.0.GA'
  providedRuntime 'jboss.jbossts:jbossts-common:4.4.0.GA'

  runtime 'org.glassfish.web:el-impl:2.2'

  // Something is really messed up here because I have to specify the deps
  runtime module('org.jboss.weld:weld-core:1.0.0') {
    dependencies 'org.jboss.weld:weld-api:1.0', 'org.jboss.weld:weld-spi:1.0'
  }

  runtime 'org.hibernate:hibernate-validator:4.0.2.GA' 

  // Weld is apparently using these
  runtime 'org.slf4j:slf4j-log4j12:1.5.9.RC1'
  runtime 'org.slf4j:slf4j-ext:1.5.9.RC1'

  if (project.hasProperty('env') && env.equals('tomcat')) {
    servlet 'org.jboss.weld.servlet:weld-servlet:1.0.0-CR2'
    servlet 'javax.faces:jsf-impl:2.0.1-FCS'
  }
}

[jettyRun,jettyRunWar]*.httpPort = 9090
[jettyRun,jettyRunWar]*.stopPort = 9091
[jettyRun,jettyRunWar]*.overrideWebXml = file('src/main/webapp-jetty/WEB-INF/override-web.xml')
[jettyRun,jettyRunWar]*.jettyEnvXmlFile = file('src/main/webapp-jetty/WEB-INF/jetty-env.xml')

// Add the classes to the classpath so it'll run in Jetty
[jettyRun,jettyRunWar]*.doFirst {
  configurations.servlet.files.each { org.mortbay.jetty.Server.class.classLoader.addURL(it.toURI().toURL()) } 
}

war {
  if (project.hasProperty('env') && 'tomcat'.equals(env))
    libConfigurations('servlet') 
}

