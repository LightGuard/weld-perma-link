usePlugin 'jetty'
usePlugin 'eclipse'

sourceTarget = 1.6
version = '1.0'
buildDirName = 'target'

gradle.taskGraph.whenReady {graph -> 
  if (graph.hasTask(':jettyRun') || graph.hasTask(':jettyRunWar'))  {
    dependencies.add('runtime', 'org.jboss.weld.servlet:weld-servlet:1.0.0-CR2')
    dependencies.add('runtime', 'javax.transaction:jta:1.1')
  }

  if (graph.hasTask(':ee6War')) {
    configurations.compile.dependencies.each { dep -> 
      if (dep.name != 'hibernate-validator')
        configurations.runtime.exclude group: dep.group
        dependencies.add('providedCompile', dep)
    }
    configurations.runtime.exclude group: 'javax.faces'
    dependencies.add('providedRuntime', 'javax.faces:jsf-impl:2.0.1-FCS')
  }

  if (graph.hasTask(':tomcatWar')) {
    dependencies.add('runtime', 'org.jboss.weld.servlet:weld-servlet:1.0.0-CR2')
    dependencies.add('runtime', 'javax.servlet:jstl:1.2')
    dependencies.add('runtime', 'javax.transaction:jta:1.1')

    tasks.getByName('war').configure { 
      fileSet(dir: file('src/main/webapp-tomcat'))
      webXml = file('src/main/webapp-tomcat/WEB-INF/web.xml')
    }
  }
}

repositories {
  mavenCentral()
  mavenRepo urls: 'http://repository.jboss.org/maven2'
  mavenRepo urls: 'http://download.java.net/maven/2'
}

configurations {
  runtime.exclude group: 'javax.el'
}

dependencies {
  compile 'javax.faces:jsf-api:2.0.1-FCS'
  compile 'javax.validation:validation-api:1.0.0.GA'
  compile 'org.hibernate:hibernate-validator:4.0.2.GA' 
  compile 'org.slf4j:slf4j-api:1.5.9.RC1' 
  compile 'javax.annotation:jsr250-api:1.0'
  compile 'javax.enterprise:cdi-api:1.0'
  compile 'javax.inject:javax.inject:1'

  runtime 'org.glassfish.web:el-impl:2.2'
  runtime 'javax.faces:jsf-impl:2.0.1-FCS'

  // Something is really messed up here because I have to specify the deps
  runtime module('org.jboss.weld:weld-core:1.0.0') {
    dependencies 'org.jboss.weld:weld-api:1.0', 'org.jboss.weld:weld-spi:1.0',
                 'org.slf4j:slf4j-log4j12:1.5.9.RC1', 'org.slf4j:slf4j-ext:1.5.9.RC1'
  } 

  providedRuntime 'javax.transaction:jta:1.1' 

  testCompile 'org.testng:testng:jdk15:5.10'
}

test.useTestNG()

[jettyRun,jettyRunWar]*.httpPort = 9090
[jettyRun,jettyRunWar]*.stopPort = 9091
[jettyRun,jettyRunWar]*.overrideWebXml = file('src/main/webapp-jetty/WEB-INF/override-web.xml')
[jettyRun,jettyRunWar]*.jettyEnvXmlFile = file('src/main/webapp-jetty/WEB-INF/jetty-env.xml')

// Add the classes to the classpath so it'll run in Jetty
[jettyRun,jettyRunWar]*.doFirst {
  configurations.providedRuntime.files.each { org.mortbay.jetty.Server.class.classLoader.addURL(it.toURI().toURL()) } 
}

tasks.addRule("Pattern: <Server>War: Builds the war for the supported servers ('ee6', 'jetty' and 'tomcat')") { String taskName ->
  if (taskName.endsWith('War')) {
    tasks.add(name: taskName, dependsOn: war)
  }
}

tasks.addRule("Pattern: <Server>Explode: Deploys an exploded war to the supported servers ('ee6', 'jetty' and 'tomcat')") { String taskName ->
  if (taskName.endsWith('Explode')) {
    tasks.add(name: taskName, dependsOn: (taskName - 'Explode') + 'War') {
      ant.unzip(src: war.archivePath, dest: "$deployPath/$war.archiveName") 
    }
  }
}

tasks.addRule("Pattern: <Server>Deploy: Deploys the war to the supported servers ('ee6', 'jetty' and 'tomcat')") { String taskName ->
  if (taskName.endsWith('Deploy')) {
    tasks.add(name: taskName, dependsOn: (taskName - 'Deploy') + 'War') { 
      copy {
        from war.archivePath
        into "$deployPath"
      }
    }
  }
} 

